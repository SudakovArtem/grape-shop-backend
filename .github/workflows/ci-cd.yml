name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check version compatibility
        run: yarn check:version

      - name: Lint
        run: yarn lint

      - name: Build
        run: yarn build

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment: production
    env:
      NODE_VERSION: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          cat > .env << EOL
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }}
          STORAGE_PUBLIC_BASE_URL=${{ secrets.STORAGE_PUBLIC_BASE_URL }}
          MAIL_TRANSPORT=${{ secrets.MAIL_TRANSPORT }}
          MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}
          EOL

      - name: Copy files to VM
        run: |
          scp -r ./* ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/grape-shop-backend/
          scp .env ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/grape-shop-backend/.env

      - name: Deploy on VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "cd ~/grape-shop-backend && docker-compose down && docker-compose build --build-arg NODE_VERSION=$NODE_VERSION && docker-compose up -d"

      - name: Deployment status notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi
